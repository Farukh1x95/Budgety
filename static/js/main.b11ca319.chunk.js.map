{"version":3,"sources":["Components/Budget.js","Components/InputData.js","App.js","serviceWorker.js","index.js"],"names":["Budget","className","console","log","this","props","records","map","one","id","type","key","note","dollar","exp","Component","InputData","state","name","value","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA2CeA,E,iLAvCX,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,iCAAd,UACCC,QAAQC,IAAIC,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAC/C,2BAAOR,UAAU,uBACf,+BACGG,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GAAG,MACZ,QAAbA,EAAIE,KACF,wBAAIC,IAAKH,EAAIC,IACX,4BAAKD,EAAII,MACT,4BAAKJ,EAAIK,SAET,WAKZ,yBAAKZ,UAAU,SACb,wBAAIA,UAAU,mCAAd,aACA,2BAAOA,UAAU,uBACf,+BACGG,KAAKC,MAAMC,QAAQC,KAAI,SAAAO,GAAG,MACZ,QAAbA,EAAIJ,KACF,wBAAIC,IAAKG,EAAIL,IACX,4BAAKK,EAAIF,MACT,4BAAKE,EAAID,SAET,iB,GA/BDE,aCiENC,E,2MA/DbC,MAAQ,CACNX,QAAS,CACP,CACEG,GAAI,EACJI,OAAQ,IACRH,KAAM,MACNE,KAAM,QAER,CACEH,GAAI,EACJI,OAAQ,IACRH,KAAM,MACNE,KAAM,YAER,CACEH,GAAI,EACJI,OAAQ,IACRH,KAAM,MACNE,KAAM,gBAER,CACEH,GAAI,EACJI,OAAQ,IACRH,KAAM,MACNE,KAAM,gB,wEAKF,IACAN,EAAYF,KAAKa,MAAjBX,QACR,OACE,6BACE,yBAAKL,UAAU,sGACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,eAAeiB,KAAK,QACpC,4BAAQC,MAAO,OAAf,KACA,4BAAQA,MAAO,OAAf,OAGJ,yBAAKlB,UAAU,cACb,2BACEA,UAAU,mBACVS,KAAK,OACLQ,KAAK,QACLE,YAAY,cACZD,MAAOf,KAAKQ,QAGhB,yBAAKX,UAAU,cACb,2BAAOS,KAAK,SAAST,UAAU,aAAamB,YAAY,WAG1D,4BAAQnB,UAAU,YAChB,uBAAGA,UAAU,gCAGhBC,QAAQC,IAAIG,GACb,kBAAC,EAAD,CAAQA,QAASA,S,GA3DDS,aCyBTM,MAxBf,WACE,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,4DAChB,yBAAKA,UAAU,SACb,uBAAGA,UAAU,QAAb,qBACA,wBAAIA,UAAU,aAAd,YACA,yBAAKA,UAAU,iCACb,uBAAGA,UAAU,iCAAb,WACU,0BAAMA,UAAU,eAAhB,WAGZ,yBAAKA,UAAU,yBACb,uBAAGA,UAAU,iCAAb,cACa,0BAAMA,UAAU,eAAhB,aAKnB,kBAAC,EAAD,QCXcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b11ca319.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Budget extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-6\">\r\n            <h4 className=\"text-uppercase mb-0 text-info\">Income</h4>\r\n            {console.log(this.props.records.map(one => one.id))}\r\n            <table className=\"table table-striped\">\r\n              <tbody>\r\n                {this.props.records.map(one =>\r\n                  one.type === \"inc\" ? (\r\n                    <tr key={one.id}>\r\n                      <td>{one.note}</td>\r\n                      <td>{one.dollar}</td>\r\n                    </tr>\r\n                  ) : null\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <h4 className=\"text-uppercase mb-0 text-danger\">Expensive</h4>\r\n            <table className=\"table table-striped\">\r\n              <tbody>\r\n                {this.props.records.map(exp =>\r\n                  exp.type === \"exp\" ? (\r\n                    <tr key={exp.id}>\r\n                      <td>{exp.note}</td>\r\n                      <td>{exp.dollar}</td>\r\n                    </tr>\r\n                  ) : null\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Budget;\r\n","import React, { Component } from \"react\";\r\nimport Budget from \"./Budget\";\r\n\r\nclass InputData extends Component {\r\n  state = {\r\n    records: [\r\n      {\r\n        id: 1,\r\n        dollar: 100,\r\n        type: \"inc\",\r\n        note: \"gift\"\r\n      },\r\n      {\r\n        id: 2,\r\n        dollar: 345,\r\n        type: \"inc\",\r\n        note: \"fun time\"\r\n      },\r\n      {\r\n        id: 3,\r\n        dollar: 250,\r\n        type: \"exp\",\r\n        note: \"pocket money\"\r\n      },\r\n      {\r\n        id: 4,\r\n        dollar: 550,\r\n        type: \"exp\",\r\n        note: \"bang money\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  render() {\r\n    const { records } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"d-flex justify-content-center align-items-center p-2 my-2  text-dark-50 bg-light rounded shadow-sm\">\r\n          <div className=\"form-group\">\r\n            <select className=\"form-control\" name=\"Type\">\r\n              <option value={\"inc\"}>+</option>\r\n              <option value={\"exp\"}>-</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"add__description\"\r\n              type=\"text\"\r\n              name=\"value\"\r\n              placeholder=\"Description\"\r\n              value={this.note}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input type=\"number\" className=\"add__value\" placeholder=\"Value\" />\r\n          </div>\r\n\r\n          <button className=\"add__btn\">\r\n            <i className=\"ion-ios-checkmark-outline\"></i>\r\n          </button>\r\n        </div>\r\n        {console.log(records)}\r\n        <Budget records={records} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default InputData;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport InputData from \"./Components/InputData\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"container d-flex justify-content-center py-4 text-center\">\n        <div className=\"col-4\">\n          <p className=\"lead\">Available Bugdet </p>\n          <h1 className=\"display-4\">+ 16699 </h1>\n          <div className=\"income-total rounded p-3 mb-2\">\n            <p className=\"text-uppercase mb-0 text-left\">\n              Income: <span className=\"float-right\">1234 </span>\n            </p>\n          </div>\n          <div className=\"exp-total rounded p-3\">\n            <p className=\"text-uppercase mb-0 text-left\">\n              Expensive: <span className=\"float-right\">1234 </span>\n            </p>\n          </div>\n        </div>\n      </header>\n      <InputData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}